"""
Django settings for Edulink project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv  # type: ignore
import os
from decouple import config  # type: ignore
from datetime import timedelta

load_dotenv()  # Load variables from .env


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# This default key should only be used in development
SECRET_KEY = config('SECRET_KEY', default="django-insecure-7z9(td$skyj--_ur+r4=f$)g*lm#&*t*$-xsey=ke1dstw8=c^")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Add type annotation for ALLOWED_HOSTS
ALLOWED_HOSTS: list[str] = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,0.0.0.0', cast=lambda v: [s.strip() for s in v.split(',')])

# Email backend - use console for development, SMTP for production
EMAIL_BACKEND = config('EMAIL_BACKEND', default="django.core.mail.backends.console.EmailBackend")

DEFAULT_FROM_EMAIL = "noreply@edulink.com"

# Application definition

# settings.py

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",  # Required for JWT token blacklisting
    "corsheaders",
    "core",  # Core utilities and template tags for error handling
    "authentication",
    "employers",
    "users",
    "chatbot",
    "security",
    "institutions",
    "internship",
    "dashboards",
    "internship_progress",
    "notifications",  # Added notifications app
    "application",  # Ensure application app is registered
    "monitoring",  # System monitoring and health checks
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "EXCEPTION_HANDLER": "Edulink.utils.error_handlers.custom_exception_handler",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
}

AUTH_USER_MODEL = "authentication.User"



SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=8),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,  # Allows token logout
    "AUTH_HEADER_TYPES": ("Bearer",),
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "security.middleware.SecurityMiddleware",  # Custom security middleware
    "security.middleware.RateLimitMiddleware",  # Rate limiting middleware
    "security.middleware.CSRFSecurityMiddleware",  # Enhanced CSRF protection
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "security.middleware.SessionSecurityMiddleware",  # Session security middleware
    "dashboards.middleware.PageViewTrackingMiddleware",  # Page view tracking
    "dashboards.middleware.ApplicationCountTrackingMiddleware",  # Application tracking
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# CORS Configuration - restrictive by default, can be overridden in dev.py
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)
CORS_ALLOW_CREDENTIALS = config('CORS_ALLOW_CREDENTIALS', default=True, cast=bool)
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])

# Allow additional headers for security and caching
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
]

ROOT_URLCONF = "Edulink.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Edulink.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PostgreSQL configuration (Supabase)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("dbname"),
        "USER": config("user"),
        "PASSWORD": config("password"),
        "HOST": config("host"),
        "PORT": config("port", default="5432"),
    }
}

# SQLite fallback (commented out)
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR.parent / "Edulink_website",  # Frontend files integration
]

# Media files (User uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SITE_ID = 1

PASSWORD_RESET_URL_TEMPLATE = (
    "http://localhost:8000/api/auth/reset-password/{uid}/{token}/"
)

# Security Configuration (Privacy-First Approach)
SECURITY_SETTINGS = {
    'MAX_LOGIN_ATTEMPTS': 5,
    'LOGIN_ATTEMPT_TIMEOUT': 300,  # 5 minutes
    'SESSION_TIMEOUT': 3600,  # 1 hour
    'PASSWORD_RESET_TIMEOUT': 3600,  # 1 hour
    'BRUTE_FORCE_THRESHOLD': 10,
    'RATE_LIMIT_REQUESTS': 100,
    'RATE_LIMIT_WINDOW': 3600,  # 1 hour
    'ENABLE_THREAT_DETECTION': True,
    'ENABLE_SESSION_SECURITY': True,
    'ENABLE_AUDIT_LOGGING': True,  # NOW MIGRATION-AWARE
    
    # Privacy-First Security Settings
    'ANONYMIZE_IP_ADDRESSES': True,  # Mask IP addresses for privacy
    'MINIMAL_LOGGING': True,         # Log only what's necessary for security
    'DATA_RETENTION_DAYS': 90,       # Automatic data cleanup after 90 days
    'GDPR_COMPLIANT': True,          # Enable GDPR compliance features
}

# Security Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Session Security - environment configurable
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool)
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Enhanced CSRF Protection - environment configurable
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_AGE = 3600  # 1 hour
CSRF_USE_SESSIONS = True
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='http://localhost:3000,http://127.0.0.1:3000', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])

# Enhanced CSRF failure handling
CSRF_FAILURE_VIEW = 'Edulink.utils.error_handlers.csrf_failure_view'

# Additional Security Settings
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# Additional Security Policies
# Allow camera and microphone for development
SECURE_PERMISSIONS_POLICY = {
    'geolocation': ['self'],
    'microphone': ['self'],
    'camera': ['self'],
}

# Privacy-First Data Collection Settings
# These settings control what data is collected and logged for security purposes
# Set to False to minimize data collection and enhance privacy
SECURITY_TRACK_SESSION_IPS = False      # Don't track IP addresses in sessions
SECURITY_TRACK_USER_AGENTS = False      # Don't track user agents in sessions
SECURITY_LOG_IP_ADDRESSES = False       # Don't log IP addresses in security events
SECURITY_LOG_USER_AGENTS = False        # Don't log user agents in security events
SECURITY_LOG_DETAILED_METADATA = False  # Only log minimal metadata

# Development Security Settings - environment configurable
DEVELOPMENT_MODE = config('DEVELOPMENT_MODE', default=True, cast=bool)
LOCALHOST_ALLOWED_IPS = ['127.0.0.1', '::1', 'localhost']
SKIP_SECURITY_FOR_LOCALHOST = config('SKIP_SECURITY_FOR_LOCALHOST', default=True, cast=bool)

# Enhanced Rate Limiting Configuration
API_RATE_LIMIT = 1000  # Increased from default
API_RATE_WINDOW = 3600
AUTH_RATE_LIMIT = 50   # Increased from default
AUTH_RATE_WINDOW = 300

# Advanced Rate Limiting Configurations
RATE_LIMIT_CONFIGS = {
    r'^/api/auth/login/$': {
        'requests': 10,
        'window': 900,  # 15 minutes
    },
    r'^/api/auth/register/$': {
        'requests': 5,
        'window': 3600,  # 1 hour
    },
    r'^/api/auth/password-reset/$': {
        'requests': 3,
        'window': 3600,  # 1 hour
    },
    r'^/api/institutions/search/$': {
        'requests': 200,
        'window': 3600,  # 1 hour
    },
    r'^/api/applications/$': {
        'requests': 50,
        'window': 3600,  # 1 hour
    },
}

# Rate limiting skip paths
RATE_LIMIT_SKIP_PATHS = [
    '/admin/',
    '/api/health/',
    '/api/monitoring/health/',
]

# Enhanced Security Threat Detection
THREAT_BLOCK_THRESHOLD = 3  # Block IP after 3 threats
MAX_REQUEST_SIZE = 10 * 1024 * 1024  # 10MB max request size
SUSPICIOUS_USER_AGENT_PATTERNS = [
    r'sqlmap', r'nikto', r'nmap', r'masscan', r'zap', r'burp',
    r'scanner', r'bot.*attack', r'hack.*tool'
]

# Session Security Settings
SESSION_MAX_AGE = 86400  # 24 hours
MAX_CONCURRENT_SESSIONS = 3  # Maximum concurrent sessions per user

# Admin Security Settings
ADMIN_ALLOWED_IPS = []  # Empty list means no IP restrictions for development

# Data Protection Compliance
DATA_PROTECTION_ENABLED = True
GDPR_COMPLIANCE = True
DATA_RETENTION_DAYS = 90
ANONYMIZE_LOGS = True
MINIMAL_DATA_COLLECTION = True

GOOGLE_GEMINI_API_KEY = os.environ.get("GOOGLE_GEMINI_API_KEY")

# Content Security Policy
CONTENT_SECURITY_POLICY = {
    'default-src': "'self'",
    'script-src': "'self' 'unsafe-inline'",
    'style-src': "'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com",
    'font-src': "'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com data:",
    'img-src': "'self' data: https:",
    'connect-src': "'self' http://127.0.0.1:8000 http://localhost:8000",
}
