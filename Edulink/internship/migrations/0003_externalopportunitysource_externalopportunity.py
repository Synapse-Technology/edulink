# Generated by Django 5.2.6 on 2025-09-11 09:37

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("internship", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ExternalOpportunitySource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Display name of the source (e.g., 'LinkedIn Jobs', 'BrighterMonday')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly identifier for the source",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the opportunity source"
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("api", "API Integration"),
                            ("scraping", "Web Scraping"),
                            ("rss", "RSS Feed"),
                            ("webhook", "Webhook"),
                        ],
                        default="scraping",
                        help_text="Method used to collect data from this source",
                        max_length=20,
                    ),
                ),
                (
                    "base_url",
                    models.URLField(help_text="Base URL of the source platform"),
                ),
                (
                    "api_endpoint",
                    models.URLField(
                        blank=True,
                        help_text="API endpoint URL (if using API integration)",
                        null=True,
                    ),
                ),
                (
                    "rss_feed_url",
                    models.URLField(
                        blank=True,
                        help_text="RSS feed URL (if using RSS integration)",
                        null=True,
                    ),
                ),
                (
                    "requires_authentication",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this source requires API authentication",
                    ),
                ),
                (
                    "api_key_required",
                    models.BooleanField(
                        default=False, help_text="Whether an API key is required"
                    ),
                ),
                (
                    "rate_limit_per_hour",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Maximum requests allowed per hour",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                    ),
                ),
                (
                    "sync_frequency",
                    models.CharField(
                        choices=[
                            ("hourly", "Every Hour"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("manual", "Manual Only"),
                        ],
                        default="daily",
                        help_text="How often to sync data from this source",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this source is currently active",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this source has been verified and approved",
                    ),
                ),
                (
                    "last_sync_attempt",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time we attempted to sync from this source",
                        null=True,
                    ),
                ),
                (
                    "last_successful_sync",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last successful sync from this source",
                        null=True,
                    ),
                ),
                (
                    "consecutive_failures",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of consecutive sync failures"
                    ),
                ),
                (
                    "total_opportunities_synced",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of opportunities synced from this source",
                    ),
                ),
                (
                    "active_opportunities_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Current number of active opportunities from this source",
                    ),
                ),
                (
                    "average_data_quality_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Average data quality score (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "target_countries",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of country codes this source focuses on (e.g., ['KE', 'UG'])",
                    ),
                ),
                (
                    "target_categories",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of opportunity categories this source specializes in",
                    ),
                ),
                (
                    "terms_of_service_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to the source's terms of service",
                        null=True,
                    ),
                ),
                (
                    "robots_txt_compliant",
                    models.BooleanField(
                        default=True,
                        help_text="Whether our scraping respects the source's robots.txt",
                    ),
                ),
                (
                    "attribution_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether we need to provide attribution to this source",
                    ),
                ),
                (
                    "attribution_text",
                    models.CharField(
                        blank=True,
                        help_text="Required attribution text (if any)",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "External Opportunity Source",
                "verbose_name_plural": "External Opportunity Sources",
                "ordering": ["name"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "is_verified"],
                        name="internship__is_acti_1232da_idx",
                    ),
                    models.Index(
                        fields=["sync_frequency", "last_sync_attempt"],
                        name="internship__sync_fr_261816_idx",
                    ),
                    models.Index(
                        fields=["source_type"], name="internship__source__57341c_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ExternalOpportunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "external_id",
                    models.CharField(
                        help_text="Original posting ID from the external source",
                        max_length=255,
                    ),
                ),
                (
                    "external_url",
                    models.URLField(help_text="Direct link to the original posting"),
                ),
                (
                    "external_company_name",
                    models.CharField(
                        blank=True,
                        help_text="Company name as it appears on the external source",
                        max_length=255,
                    ),
                ),
                (
                    "data_quality_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Data quality score from 0.0 to 1.0",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "data_quality_level",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent (0.9-1.0)"),
                            ("good", "Good (0.7-0.89)"),
                            ("fair", "Fair (0.5-0.69)"),
                            ("poor", "Poor (0.3-0.49)"),
                            ("very_poor", "Very Poor (0.0-0.29)"),
                        ],
                        default="fair",
                        help_text="Human-readable data quality level",
                        max_length=20,
                    ),
                ),
                (
                    "is_verified_external",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this external opportunity has been manually verified",
                    ),
                ),
                (
                    "compliance_checked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether compliance with source terms has been verified",
                    ),
                ),
                (
                    "content_appropriate",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the content meets our platform standards",
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Sync"),
                            ("synced", "Successfully Synced"),
                            ("failed", "Sync Failed"),
                            ("outdated", "Needs Update"),
                            ("removed", "Removed from Source"),
                        ],
                        default="pending",
                        help_text="Current synchronization status",
                        max_length=20,
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this opportunity was first discovered",
                    ),
                ),
                (
                    "last_updated_external",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last update time from the external source",
                        null=True,
                    ),
                ),
                (
                    "last_sync_attempt",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time we attempted to sync this opportunity",
                        null=True,
                    ),
                ),
                (
                    "last_successful_sync",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last successful sync of this opportunity",
                        null=True,
                    ),
                ),
                (
                    "sync_frequency",
                    models.CharField(
                        choices=[
                            ("hourly", "Every Hour"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("manual", "Manual Only"),
                        ],
                        default="daily",
                        help_text="How often to sync this specific opportunity",
                        max_length=20,
                    ),
                ),
                (
                    "next_sync_due",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the next sync is scheduled",
                        null=True,
                    ),
                ),
                (
                    "sync_error_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of consecutive sync errors"
                    ),
                ),
                (
                    "last_sync_error",
                    models.TextField(blank=True, help_text="Last sync error message"),
                ),
                (
                    "raw_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Original raw data from the external source",
                    ),
                ),
                (
                    "transformation_log",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Log of data transformations applied",
                    ),
                ),
                (
                    "is_duplicate",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this has been marked as a duplicate",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this opportunity has been viewed",
                    ),
                ),
                (
                    "application_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of applications received through our platform",
                    ),
                ),
                (
                    "click_through_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of clicks to the external source"
                    ),
                ),
                (
                    "duplicate_of",
                    models.ForeignKey(
                        blank=True,
                        help_text="The original opportunity this is a duplicate of",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="duplicates",
                        to="internship.externalopportunity",
                    ),
                ),
                (
                    "internship",
                    models.OneToOneField(
                        help_text="Link to the main internship record",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="external_opportunity",
                        to="internship.internship",
                    ),
                ),
                (
                    "potential_duplicates",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Other opportunities that might be duplicates",
                        to="internship.externalopportunity",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        help_text="External source this opportunity came from",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="opportunities",
                        to="internship.externalopportunitysource",
                    ),
                ),
            ],
            options={
                "verbose_name": "External Opportunity",
                "verbose_name_plural": "External Opportunities",
                "ordering": ["-first_seen"],
                "indexes": [
                    models.Index(
                        fields=["source", "external_id"],
                        name="internship__source__0b7964_idx",
                    ),
                    models.Index(
                        fields=["sync_status", "next_sync_due"],
                        name="internship__sync_st_84f373_idx",
                    ),
                    models.Index(
                        fields=["data_quality_score"],
                        name="internship__data_qu_8a0c15_idx",
                    ),
                    models.Index(
                        fields=["is_verified_external", "compliance_checked"],
                        name="internship__is_veri_e4f546_idx",
                    ),
                    models.Index(
                        fields=["is_duplicate", "duplicate_of"],
                        name="internship__is_dupl_f9a485_idx",
                    ),
                    models.Index(
                        fields=["first_seen", "last_successful_sync"],
                        name="internship__first_s_57b61a_idx",
                    ),
                ],
                "unique_together": {("source", "external_id")},
            },
        ),
    ]
