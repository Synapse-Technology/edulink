version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: edulink_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-edulink}
      POSTGRES_USER: ${DB_USER:-edulink_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-edulink_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - edulink_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-edulink_user} -d ${DB_NAME:-edulink}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: edulink_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - edulink_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: edulink_web
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=Edulink.settings.prod
      - DATABASE_URL=postgresql://${DB_USER:-edulink_user}:${DB_PASSWORD:-edulink_password}@db:5432/${DB_NAME:-edulink}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - edulink_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: edulink_celery_worker
    restart: unless-stopped
    command: celery -A Edulink worker --loglevel=info --concurrency=2
    environment:
      - DJANGO_SETTINGS_MODULE=Edulink.settings.prod
      - DATABASE_URL=postgresql://${DB_USER:-edulink_user}:${DB_PASSWORD:-edulink_password}@db:5432/${DB_NAME:-edulink}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - media_volume:/app/mediafiles
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - edulink_network
    healthcheck:
      test: ["CMD", "celery", "-A", "Edulink", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: edulink_celery_beat
    restart: unless-stopped
    command: celery -A Edulink beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DJANGO_SETTINGS_MODULE=Edulink.settings.prod
      - DATABASE_URL=postgresql://${DB_USER:-edulink_user}:${DB_PASSWORD:-edulink_password}@db:5432/${DB_NAME:-edulink}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - edulink_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: edulink_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - edulink_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: edulink_flower
    restart: unless-stopped
    command: celery -A Edulink flower --port=5555
    environment:
      - DJANGO_SETTINGS_MODULE=Edulink.settings.prod
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower_password}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - edulink_network
    profiles:
      - monitoring

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: edulink_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - edulink_network
    profiles:
      - monitoring

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: edulink_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - edulink_network
    profiles:
      - monitoring

  # Elasticsearch (Search Engine)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: edulink_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - edulink_network
    profiles:
      - search
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: edulink_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - edulink_network
    profiles:
      - development

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Networks
networks:
  edulink_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16