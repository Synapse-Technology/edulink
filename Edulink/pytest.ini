[tool:pytest]
DJANGO_SETTINGS_MODULE = Edulink.settings.test
python_files = tests.py test_*.py *_tests.py
python_classes = Test* *Tests
python_functions = test_*
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=.
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --reuse-db
    --nomigrations
    --maxfail=5
    -p no:warnings

markers =
    unit: Unit tests
    integration: Integration tests
    api: API endpoint tests
    slow: Slow running tests
    auth: Authentication related tests
    permissions: Permission related tests
    models: Model tests
    views: View tests
    serializers: Serializer tests
    utils: Utility function tests
    security: Security related tests
    performance: Performance tests
    external: Tests that require external services
    smoke: Smoke tests for basic functionality

testpaths = 
    authentication/tests.py
    users/tests.py
    internship/tests.py
    application/tests.py
    internship_progress/tests.py
    notifications/tests.py
    dashboards/tests.py
    tests/

filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*USE_TZ.*:RuntimeWarning

norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    .venv
    venv
    env
    __pycache__
    .pytest_cache
    htmlcov
    .coverage
    node_modules
    migrations

# Minimum version requirements
minversion = 6.0

# Test discovery patterns
collect_ignore = [
    "setup.py",
    "manage.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*"
]

# Coverage configuration
[coverage:run]
source = .
omit = 
    */venv/*
    */.venv/*
    */env/*
    */migrations/*
    */tests/*
    */test_*
    */*_test.py
    */conftest.py
    manage.py
    */settings/*
    */wsgi.py
    */asgi.py
    */urls.py
    */__init__.py
    */admin.py
    */apps.py
    setup.py
    */node_modules/*
    htmlcov/*
    .pytest_cache/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = True
skip_covered = False
precision = 2

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml