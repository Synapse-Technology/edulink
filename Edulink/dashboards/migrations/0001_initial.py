# Generated by Django 4.2.7 on 2025-09-03 05:54

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "achievement_type",
                    models.CharField(
                        choices=[
                            ("profile", "Profile Completion"),
                            ("application", "Application Milestone"),
                            ("interview", "Interview Milestone"),
                            ("acceptance", "Acceptance Milestone"),
                            ("streak", "Activity Streak"),
                            ("skill", "Skill Development"),
                            ("social", "Social Engagement"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        help_text="Bootstrap icon class or emoji", max_length=50
                    ),
                ),
                ("points", models.PositiveIntegerField(default=10)),
                (
                    "criteria",
                    models.JSONField(help_text="Criteria for earning this achievement"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["points", "name"],
            },
        ),
        migrations.CreateModel(
            name="AnalyticsEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("application_submitted", "Application Submitted"),
                            ("application_viewed", "Application Viewed"),
                            ("interview_scheduled", "Interview Scheduled"),
                            ("interview_completed", "Interview Completed"),
                            ("offer_received", "Offer Received"),
                            ("offer_accepted", "Offer Accepted"),
                            ("profile_updated", "Profile Updated"),
                            ("skill_added", "Skill Added"),
                            ("internship_viewed", "Internship Viewed"),
                            ("search_performed", "Search Performed"),
                        ],
                        max_length=30,
                    ),
                ),
                ("event_data", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="CalendarEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("application_deadline", "Application Deadline"),
                            ("interview", "Interview"),
                            ("follow_up", "Follow Up"),
                            ("career_fair", "Career Fair"),
                            ("workshop", "Workshop"),
                            ("deadline_reminder", "Deadline Reminder"),
                            ("goal_reminder", "Goal Reminder"),
                            ("custom", "Custom Event"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("is_all_day", models.BooleanField(default=False)),
                ("reminder_sent", models.BooleanField(default=False)),
                ("reminder_time", models.DateTimeField(blank=True, null=True)),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("location", models.CharField(blank=True, max_length=200)),
                (
                    "color",
                    models.CharField(
                        default="#14b8a6", help_text="Hex color code", max_length=7
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["start_date", "priority"],
            },
        ),
        migrations.CreateModel(
            name="DashboardInsight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "insight_type",
                    models.CharField(
                        choices=[
                            ("profile", "Profile Improvement"),
                            ("application", "Application Strategy"),
                            ("skill", "Skill Development"),
                            ("market", "Market Trends"),
                            ("timing", "Timing Optimization"),
                            ("networking", "Networking"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("action_items", models.JSONField(blank=True, default=list)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("is_actioned", models.BooleanField(default=False)),
                (
                    "relevance_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-relevance_score", "-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="InternshipProgress",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "profile_completion",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Profile completion percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "profile_completion_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed breakdown of profile completion status",
                    ),
                ),
                ("first_application_date", models.DateTimeField(blank=True, null=True)),
                (
                    "total_applications",
                    models.PositiveIntegerField(db_index=True, default=0),
                ),
                ("applications_this_month", models.PositiveIntegerField(default=0)),
                ("applications_this_week", models.PositiveIntegerField(default=0)),
                ("applications_this_quarter", models.PositiveIntegerField(default=0)),
                ("pending_applications", models.PositiveIntegerField(default=0)),
                ("accepted_applications", models.PositiveIntegerField(default=0)),
                ("rejected_applications", models.PositiveIntegerField(default=0)),
                ("withdrawn_applications", models.PositiveIntegerField(default=0)),
                ("total_interviews", models.PositiveIntegerField(default=0)),
                ("interviews_this_month", models.PositiveIntegerField(default=0)),
                ("upcoming_interviews", models.PositiveIntegerField(default=0)),
                ("completed_interviews", models.PositiveIntegerField(default=0)),
                ("cancelled_interviews", models.PositiveIntegerField(default=0)),
                ("interview_success_rate", models.FloatField(default=0.0)),
                (
                    "average_interview_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("total_acceptances", models.PositiveIntegerField(default=0)),
                ("first_acceptance_date", models.DateTimeField(blank=True, null=True)),
                ("offers_received", models.PositiveIntegerField(default=0)),
                ("offers_accepted", models.PositiveIntegerField(default=0)),
                ("offers_declined", models.PositiveIntegerField(default=0)),
                ("offers_expired", models.PositiveIntegerField(default=0)),
                (
                    "internship_status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("searching", "Actively Searching"),
                            ("applied", "Applications Submitted"),
                            ("interviewing", "In Interview Process"),
                            ("offer_received", "Offer Received"),
                            ("internship_active", "Currently Interning"),
                            ("internship_completed", "Internship Completed"),
                            ("on_hold", "Search On Hold"),
                        ],
                        db_index=True,
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "internship_completion_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("skills_developed", models.JSONField(blank=True, default=list)),
                ("skills_targeted", models.JSONField(blank=True, default=list)),
                ("skills_in_progress", models.JSONField(blank=True, default=list)),
                ("certifications_earned", models.JSONField(blank=True, default=list)),
                (
                    "certifications_in_progress",
                    models.JSONField(blank=True, default=list),
                ),
                ("courses_completed", models.PositiveIntegerField(default=0)),
                (
                    "learning_hours",
                    models.PositiveIntegerField(
                        default=0, help_text="Total learning hours"
                    ),
                ),
                ("projects_completed", models.PositiveIntegerField(default=0)),
                ("current_streak", models.PositiveIntegerField(default=0)),
                ("longest_streak", models.PositiveIntegerField(default=0)),
                ("last_activity_date", models.DateField(blank=True, null=True)),
                ("total_activity_days", models.PositiveIntegerField(default=0)),
                (
                    "total_session_time",
                    models.DurationField(default=datetime.timedelta(0)),
                ),
                (
                    "monthly_application_goal",
                    models.PositiveIntegerField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "weekly_application_goal",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "goal_status",
                    models.CharField(
                        choices=[
                            ("not_set", "Not Set"),
                            ("in_progress", "In Progress"),
                            ("achieved", "Achieved"),
                            ("overdue", "Overdue"),
                            ("paused", "Paused"),
                        ],
                        default="not_set",
                        max_length=15,
                    ),
                ),
                ("goal_deadline", models.DateField(blank=True, null=True)),
                ("target_industries", models.JSONField(blank=True, default=list)),
                ("target_companies", models.JSONField(blank=True, default=list)),
                (
                    "overall_performance_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                ("network_connections", models.PositiveIntegerField(default=0)),
                ("mentor_connections", models.PositiveIntegerField(default=0)),
                ("industry_events_attended", models.PositiveIntegerField(default=0)),
                (
                    "average_employer_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("total_feedback_received", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_milestone_achieved",
                    models.DateTimeField(blank=True, null=True),
                ),
            ],
            options={
                "verbose_name_plural": "Internship Progress",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="PageView",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True, db_index=True, max_length=40, null=True
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("path", models.CharField(db_index=True, max_length=500)),
                ("full_url", models.URLField(blank=True, max_length=1000)),
                ("referrer", models.URLField(blank=True, max_length=1000, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True, help_text="Time spent on page in seconds", null=True
                    ),
                ),
                ("is_authenticated", models.BooleanField(db_index=True, default=False)),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("desktop", "Desktop"),
                            ("mobile", "Mobile"),
                            ("tablet", "Tablet"),
                            ("unknown", "Unknown"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ProgressMilestone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "milestone_type",
                    models.CharField(
                        choices=[
                            ("profile_complete", "Profile Completed"),
                            ("first_application", "First Application Submitted"),
                            ("first_interview", "First Interview Scheduled"),
                            ("first_offer", "First Offer Received"),
                            ("internship_started", "Internship Started"),
                            ("internship_completed", "Internship Completed"),
                            ("skill_acquired", "New Skill Acquired"),
                            ("certification_earned", "Certification Earned"),
                            ("goal_achieved", "Goal Achieved"),
                            ("streak_milestone", "Activity Streak Milestone"),
                        ],
                        db_index=True,
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("achieved_at", models.DateTimeField(auto_now_add=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Progress Milestone",
                "verbose_name_plural": "Progress Milestones",
                "ordering": ["-achieved_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "progress_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data about progress towards achievement",
                    ),
                ),
            ],
            options={
                "ordering": ["-earned_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("activity_date", models.DateField()),
                ("activity_type", models.CharField(max_length=32)),
            ],
            options={
                "ordering": ["-activity_date"],
            },
        ),
        migrations.CreateModel(
            name="Workflow",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "workflow_type",
                    models.CharField(
                        choices=[
                            ("application_review", "Application Review"),
                            ("interview_scheduling", "Interview Scheduling"),
                            ("candidate_communication", "Candidate Communication"),
                            ("onboarding", "Onboarding Process"),
                            ("performance_tracking", "Performance Tracking"),
                            ("custom", "Custom Workflow"),
                        ],
                        default="custom",
                        max_length=30,
                    ),
                ),
                (
                    "trigger_event",
                    models.CharField(
                        choices=[
                            ("new_application", "New Application Received"),
                            ("application_approved", "Application Approved"),
                            ("interview_scheduled", "Interview Scheduled"),
                            ("interview_completed", "Interview Completed"),
                            ("offer_sent", "Offer Sent"),
                            ("manual", "Manual Trigger"),
                            ("scheduled", "Scheduled Trigger"),
                        ],
                        default="manual",
                        max_length=30,
                    ),
                ),
                (
                    "trigger_conditions",
                    models.JSONField(
                        default=dict, help_text="Specific conditions for triggering"
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("send_email", "Send Email"),
                            ("update_status", "Update Status"),
                            ("create_task", "Create Task"),
                            ("send_notification", "Send Notification"),
                            ("schedule_interview", "Schedule Interview"),
                            ("generate_report", "Generate Report"),
                        ],
                        default="send_email",
                        max_length=30,
                    ),
                ),
                (
                    "action_config",
                    models.JSONField(
                        default=dict, help_text="Configuration for the action"
                    ),
                ),
                (
                    "delay_amount",
                    models.PositiveIntegerField(
                        default=0, help_text="Delay before execution"
                    ),
                ),
                (
                    "delay_unit",
                    models.CharField(
                        choices=[
                            ("minutes", "Minutes"),
                            ("hours", "Hours"),
                            ("days", "Days"),
                            ("weeks", "Weeks"),
                        ],
                        default="minutes",
                        max_length=10,
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("is_paused", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_executed", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WorkflowAnalytics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="daily",
                        max_length=10,
                    ),
                ),
                ("total_executions", models.PositiveIntegerField(default=0)),
                ("successful_executions", models.PositiveIntegerField(default=0)),
                ("failed_executions", models.PositiveIntegerField(default=0)),
                ("cancelled_executions", models.PositiveIntegerField(default=0)),
                ("average_duration", models.DurationField(blank=True, null=True)),
                (
                    "total_time_saved",
                    models.DurationField(default=datetime.timedelta(0)),
                ),
                ("tasks_automated", models.PositiveIntegerField(default=0)),
                (
                    "success_rate",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "metrics_data",
                    models.JSONField(
                        default=dict, help_text="Additional custom metrics"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="WorkflowTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200)),
                ("description", models.TextField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("application", "Application Management"),
                            ("communication", "Communication"),
                            ("scheduling", "Scheduling"),
                            ("analytics", "Analytics & Reporting"),
                            ("custom", "Custom Workflow"),
                        ],
                        default="custom",
                        max_length=20,
                    ),
                ),
                ("icon", models.CharField(default="fas fa-cog", max_length=50)),
                ("color", models.CharField(default="blue", max_length=20)),
                (
                    "steps",
                    models.JSONField(default=list, help_text="List of workflow steps"),
                ),
                (
                    "trigger_conditions",
                    models.JSONField(
                        default=dict, help_text="Conditions that trigger this workflow"
                    ),
                ),
                (
                    "default_settings",
                    models.JSONField(
                        default=dict,
                        help_text="Default settings for workflows created from this template",
                    ),
                ),
                ("estimated_time", models.CharField(default="5 min", max_length=20)),
                ("steps_count", models.PositiveIntegerField(default=1)),
                ("popularity_score", models.PositiveIntegerField(default=0)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this template is available to all users",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_workflow_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-popularity_score", "name"],
            },
        ),
        migrations.CreateModel(
            name="WorkflowExecution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("skipped", "Skipped"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "triggered_by",
                    models.CharField(
                        help_text="What triggered this execution", max_length=100
                    ),
                ),
                (
                    "trigger_data",
                    models.JSONField(
                        default=dict, help_text="Data that triggered the workflow"
                    ),
                ),
                ("scheduled_at", models.DateTimeField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("duration", models.DurationField(blank=True, null=True)),
                (
                    "result_data",
                    models.JSONField(
                        default=dict, help_text="Results of the workflow execution"
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("logs", models.JSONField(default=list, help_text="Execution logs")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "workflow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="dashboards.workflow",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
