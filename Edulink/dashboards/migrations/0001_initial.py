# Generated by Django 5.2.4 on 2025-07-30 07:09

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("application", "0003_auto_20250730_1035"),
        ("internship", "0001_initial"),
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "achievement_type",
                    models.CharField(
                        choices=[
                            ("profile", "Profile Completion"),
                            ("application", "Application Milestone"),
                            ("interview", "Interview Milestone"),
                            ("acceptance", "Acceptance Milestone"),
                            ("streak", "Activity Streak"),
                            ("skill", "Skill Development"),
                            ("social", "Social Engagement"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        help_text="Bootstrap icon class or emoji", max_length=50
                    ),
                ),
                ("points", models.PositiveIntegerField(default=10)),
                (
                    "criteria",
                    models.JSONField(help_text="Criteria for earning this achievement"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["points", "name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardInsight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "insight_type",
                    models.CharField(
                        choices=[
                            ("profile", "Profile Improvement"),
                            ("application", "Application Strategy"),
                            ("skill", "Skill Development"),
                            ("market", "Market Trends"),
                            ("timing", "Timing Optimization"),
                            ("networking", "Networking"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("action_items", models.JSONField(blank=True, default=list)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("is_actioned", models.BooleanField(default=False)),
                (
                    "relevance_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="insights",
                        to="users.studentprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-relevance_score", "-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="InternshipProgress",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "profile_completion",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Profile completion percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "profile_completion_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed breakdown of profile completion status",
                    ),
                ),
                ("first_application_date", models.DateTimeField(blank=True, null=True)),
                (
                    "total_applications",
                    models.PositiveIntegerField(db_index=True, default=0),
                ),
                ("applications_this_month", models.PositiveIntegerField(default=0)),
                ("applications_this_week", models.PositiveIntegerField(default=0)),
                ("applications_this_quarter", models.PositiveIntegerField(default=0)),
                ("pending_applications", models.PositiveIntegerField(default=0)),
                ("accepted_applications", models.PositiveIntegerField(default=0)),
                ("rejected_applications", models.PositiveIntegerField(default=0)),
                ("withdrawn_applications", models.PositiveIntegerField(default=0)),
                ("total_interviews", models.PositiveIntegerField(default=0)),
                ("interviews_this_month", models.PositiveIntegerField(default=0)),
                ("upcoming_interviews", models.PositiveIntegerField(default=0)),
                ("completed_interviews", models.PositiveIntegerField(default=0)),
                ("cancelled_interviews", models.PositiveIntegerField(default=0)),
                ("interview_success_rate", models.FloatField(default=0.0)),
                (
                    "average_interview_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("total_acceptances", models.PositiveIntegerField(default=0)),
                ("first_acceptance_date", models.DateTimeField(blank=True, null=True)),
                ("offers_received", models.PositiveIntegerField(default=0)),
                ("offers_accepted", models.PositiveIntegerField(default=0)),
                ("offers_declined", models.PositiveIntegerField(default=0)),
                ("offers_expired", models.PositiveIntegerField(default=0)),
                (
                    "internship_status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("searching", "Actively Searching"),
                            ("applied", "Applications Submitted"),
                            ("interviewing", "In Interview Process"),
                            ("offer_received", "Offer Received"),
                            ("internship_active", "Currently Interning"),
                            ("internship_completed", "Internship Completed"),
                            ("on_hold", "Search On Hold"),
                        ],
                        db_index=True,
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "internship_completion_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("skills_developed", models.JSONField(blank=True, default=list)),
                ("skills_targeted", models.JSONField(blank=True, default=list)),
                ("skills_in_progress", models.JSONField(blank=True, default=list)),
                ("certifications_earned", models.JSONField(blank=True, default=list)),
                (
                    "certifications_in_progress",
                    models.JSONField(blank=True, default=list),
                ),
                ("courses_completed", models.PositiveIntegerField(default=0)),
                (
                    "learning_hours",
                    models.PositiveIntegerField(
                        default=0, help_text="Total learning hours"
                    ),
                ),
                ("projects_completed", models.PositiveIntegerField(default=0)),
                ("current_streak", models.PositiveIntegerField(default=0)),
                ("longest_streak", models.PositiveIntegerField(default=0)),
                ("last_activity_date", models.DateField(blank=True, null=True)),
                ("total_activity_days", models.PositiveIntegerField(default=0)),
                (
                    "total_session_time",
                    models.DurationField(default=datetime.timedelta(0)),
                ),
                (
                    "monthly_application_goal",
                    models.PositiveIntegerField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "weekly_application_goal",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "goal_status",
                    models.CharField(
                        choices=[
                            ("not_set", "Not Set"),
                            ("in_progress", "In Progress"),
                            ("achieved", "Achieved"),
                            ("overdue", "Overdue"),
                            ("paused", "Paused"),
                        ],
                        default="not_set",
                        max_length=15,
                    ),
                ),
                ("goal_deadline", models.DateField(blank=True, null=True)),
                ("target_industries", models.JSONField(blank=True, default=list)),
                ("target_companies", models.JSONField(blank=True, default=list)),
                (
                    "overall_performance_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                ("network_connections", models.PositiveIntegerField(default=0)),
                ("mentor_connections", models.PositiveIntegerField(default=0)),
                ("industry_events_attended", models.PositiveIntegerField(default=0)),
                (
                    "average_employer_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("total_feedback_received", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_milestone_achieved",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "student",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="internship_progress",
                        to="users.studentprofile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Internship Progress",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="ProgressMilestone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "milestone_type",
                    models.CharField(
                        choices=[
                            ("profile_complete", "Profile Completed"),
                            ("first_application", "First Application Submitted"),
                            ("first_interview", "First Interview Scheduled"),
                            ("first_offer", "First Offer Received"),
                            ("internship_started", "Internship Started"),
                            ("internship_completed", "Internship Completed"),
                            ("skill_acquired", "New Skill Acquired"),
                            ("certification_earned", "Certification Earned"),
                            ("goal_achieved", "Goal Achieved"),
                            ("streak_milestone", "Activity Streak Milestone"),
                        ],
                        db_index=True,
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("achieved_at", models.DateTimeField(auto_now_add=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "progress",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="milestones",
                        to="dashboards.internshipprogress",
                    ),
                ),
            ],
            options={
                "verbose_name": "Progress Milestone",
                "verbose_name_plural": "Progress Milestones",
                "ordering": ["-achieved_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "progress_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data about progress towards achievement",
                    ),
                ),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_achievements",
                        to="dashboards.achievement",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to="users.studentprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-earned_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("activity_date", models.DateField()),
                ("activity_type", models.CharField(max_length=32)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_logs",
                        to="users.studentprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-activity_date"],
            },
        ),
        migrations.CreateModel(
            name="AnalyticsEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("application_submitted", "Application Submitted"),
                            ("application_viewed", "Application Viewed"),
                            ("interview_scheduled", "Interview Scheduled"),
                            ("interview_completed", "Interview Completed"),
                            ("offer_received", "Offer Received"),
                            ("offer_accepted", "Offer Accepted"),
                            ("profile_updated", "Profile Updated"),
                            ("skill_added", "Skill Added"),
                            ("internship_viewed", "Internship Viewed"),
                            ("search_performed", "Search Performed"),
                        ],
                        max_length=30,
                    ),
                ),
                ("event_data", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics_events",
                        to="users.studentprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["student", "event_type", "timestamp"],
                        name="dashboards__student_9d1ae5_idx",
                    ),
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="dashboards__event_t_39e767_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CalendarEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("application_deadline", "Application Deadline"),
                            ("interview", "Interview"),
                            ("follow_up", "Follow Up"),
                            ("career_fair", "Career Fair"),
                            ("workshop", "Workshop"),
                            ("deadline_reminder", "Deadline Reminder"),
                            ("goal_reminder", "Goal Reminder"),
                            ("custom", "Custom Event"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("is_all_day", models.BooleanField(default=False)),
                ("reminder_sent", models.BooleanField(default=False)),
                ("reminder_time", models.DateTimeField(blank=True, null=True)),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("location", models.CharField(blank=True, max_length=200)),
                (
                    "color",
                    models.CharField(
                        default="#14b8a6", help_text="Hex color code", max_length=7
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "related_application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="application.application",
                    ),
                ),
                (
                    "related_internship",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="internship.internship",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calendar_events",
                        to="users.studentprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["start_date", "priority"],
                "indexes": [
                    models.Index(
                        fields=["student", "start_date"],
                        name="dashboards__student_e0b0aa_idx",
                    ),
                    models.Index(
                        fields=["event_type", "start_date"],
                        name="dashboards__event_t_c8f9ee_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="internshipprogress",
            index=models.Index(
                fields=["student", "internship_status"],
                name="dashboards__student_51fd60_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="internshipprogress",
            index=models.Index(
                fields=["profile_completion"], name="dashboards__profile_4674c3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="internshipprogress",
            index=models.Index(
                fields=["total_applications", "accepted_applications"],
                name="dashboards__total_a_bb96bb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="internshipprogress",
            index=models.Index(
                fields=["current_streak", "last_activity_date"],
                name="dashboards__current_a4e5bd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="internshipprogress",
            index=models.Index(
                fields=["goal_status", "goal_deadline"],
                name="dashboards__goal_st_174d6f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="internshipprogress",
            index=models.Index(
                fields=["overall_performance_score"],
                name="dashboards__overall_2ccfaf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="progressmilestone",
            index=models.Index(
                fields=["progress", "milestone_type"],
                name="dashboards__progres_ab51d0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="progressmilestone",
            index=models.Index(
                fields=["milestone_type", "achieved_at"],
                name="dashboards__milesto_f60dea_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="progressmilestone",
            unique_together={("progress", "milestone_type", "achieved_at")},
        ),
        migrations.AlterUniqueTogether(
            name="studentachievement",
            unique_together={("student", "achievement")},
        ),
        migrations.AlterUniqueTogether(
            name="studentactivitylog",
            unique_together={("student", "activity_date", "activity_type")},
        ),
    ]
