# Generated by Django 5.2.4 on 2025-07-30 07:09

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("application", "0001_initial"),
        ("internship", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email_enabled", models.BooleanField(default=True)),
                ("email_application_updates", models.BooleanField(default=True)),
                ("email_internship_matches", models.BooleanField(default=True)),
                ("email_reminders", models.BooleanField(default=True)),
                ("sms_enabled", models.BooleanField(default=False)),
                ("sms_urgent_only", models.BooleanField(default=True)),
                ("push_enabled", models.BooleanField(default=True)),
                ("push_application_updates", models.BooleanField(default=True)),
                ("push_messages", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="Notification subject/title.", max_length=255
                    ),
                ),
                (
                    "message",
                    models.TextField(help_text="The content of the notification."),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("push", "Push Notification"),
                            ("in_app", "In-App Notification"),
                        ],
                        db_index=True,
                        help_text="Type of notification (email, SMS, push).",
                        max_length=10,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        help_text="Priority level of the notification.",
                        max_length=10,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When the notification was created.",
                    ),
                ),
                (
                    "is_read",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Indicates if the user has read the notification.",
                    ),
                ),
                (
                    "read_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the notification was read.",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("failed", "Failed"),
                            ("retry", "Retry"),
                        ],
                        db_index=True,
                        default="pending",
                        help_text="Delivery status of the notification.",
                        max_length=10,
                    ),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the notification was sent.",
                        null=True,
                    ),
                ),
                (
                    "delivered_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the notification was delivered.",
                        null=True,
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of retry attempts.",
                        validators=[django.core.validators.MaxValueValidator(5)],
                    ),
                ),
                (
                    "next_retry_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When to retry sending the notification.",
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if delivery failed."
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata for the notification.",
                    ),
                ),
                (
                    "related_application",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to an application if the notification is status-related.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="application.application",
                    ),
                ),
                (
                    "related_internship",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to an internship if the notification is relevant to an internship.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="internship.internship",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The recipient of the notification.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_read"],
                        name="notificatio_user_id_427e4b_idx",
                    ),
                    models.Index(
                        fields=["status", "next_retry_at"],
                        name="notificatio_status_6bb0bf_idx",
                    ),
                    models.Index(
                        fields=["notification_type", "timestamp"],
                        name="notificatio_notific_a304ee_idx",
                    ),
                    models.Index(
                        fields=["priority", "timestamp"],
                        name="notificatio_priorit_d875fc_idx",
                    ),
                ],
            },
        ),
    ]
