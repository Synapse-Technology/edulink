# Pre-commit configuration for Edulink Backend
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: debug-statements
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: requirements-txt-fixer
      - id: sort-simple-yaml
      - id: file-contents-sorter
        files: '^requirements.*\.txt$'
        args: [--ignore-case]

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88, --target-version=py311]
        exclude: '^(migrations/|venv/|env/)'

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88, --multi-line=3]
        exclude: '^(migrations/|venv/|env/)'

  # Python linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args:
          - --max-line-length=88
          - --extend-ignore=E203,W503,E501
          - --max-complexity=10
          - --select=E,W,F,C
        exclude: '^(migrations/|venv/|env/|settings/)'
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-bandit

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --strict-optional, --warn-redundant-casts]
        exclude: '^(migrations/|venv/|env/|tests/)'
        additional_dependencies:
          - django-stubs
          - djangorestframework-stubs
          - types-requests
          - types-redis
          - types-python-dateutil

  # Security linting with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, --format, custom, --skip, B101,B601]
        exclude: '^(tests/|venv/|env/)'

  # Django-specific checks
  - repo: https://github.com/adamchainz/django-upgrade
    rev: 1.15.0
    hooks:
      - id: django-upgrade
        args: [--target-version, "4.2"]
        exclude: '^(migrations/|venv/|env/)'

  # Documentation linting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args:
          - --convention=google
          - --add-ignore=D100,D101,D102,D103,D104,D105,D106,D107
        exclude: '^(migrations/|venv/|env/|tests/|manage.py)'

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types: [yaml]
        exclude: '^(.github/)'

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [-e, SC1091, -e, SC2039]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009, --ignore, DL3015]

  # SQL formatting
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 3.0.2
    hooks:
      - id: sqlfluff-lint
        args: [--dialect, postgres]
        files: '\.sql$'
      - id: sqlfluff-fix
        args: [--dialect, postgres]
        files: '\.sql$'

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: '^(tests/|.*\.lock$)'

  # Python security
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--ignore, 51668]

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Local hooks for Django-specific checks
  - repo: local
    hooks:
      # Django check
      - id: django-check
        name: Django Check
        entry: python manage.py check
        language: system
        types: [python]
        require_serial: true
        pass_filenames: false
        stages: [pre-push]

      # Django migrations check
      - id: django-check-migrations
        name: Django Check Migrations
        entry: python manage.py makemigrations --check --dry-run
        language: system
        types: [python]
        require_serial: true
        pass_filenames: false
        stages: [pre-push]

      # Django test check (fast tests only)
      - id: django-test-fast
        name: Django Fast Tests
        entry: python manage.py test --parallel --keepdb --tag=fast
        language: system
        types: [python]
        require_serial: true
        pass_filenames: false
        stages: [pre-push]

      # Check for missing migrations
      - id: check-missing-migrations
        name: Check for missing migrations
        entry: python manage.py makemigrations --check
        language: system
        types: [python]
        require_serial: true
        pass_filenames: false

      # Check for model changes
      - id: check-model-changes
        name: Check for model changes
        entry: bash -c 'python manage.py makemigrations --dry-run --verbosity=3 | grep -q "No changes detected" || (echo "Model changes detected. Please create migrations." && exit 1)'
        language: system
        types: [python]
        require_serial: true
        pass_filenames: false

      # Check requirements.txt is sorted
      - id: requirements-sorted
        name: Requirements.txt sorted
        entry: bash -c 'sort -c requirements.txt'
        language: system
        files: '^requirements.*\.txt$'

      # Check for debug statements
      - id: check-debug-statements
        name: Check for debug statements
        entry: bash -c 'grep -rn "import pdb\|pdb.set_trace\|import ipdb\|ipdb.set_trace\|import pudb\|pudb.set_trace" --include="*.py" . && exit 1 || exit 0'
        language: system
        types: [python]

      # Check for TODO/FIXME comments
      - id: check-todos
        name: Check for TODO/FIXME comments
        entry: bash -c 'grep -rn "TODO\|FIXME\|XXX\|HACK" --include="*.py" . && echo "Please resolve TODO/FIXME comments before committing" && exit 1 || exit 0'
        language: system
        types: [python]
        stages: [pre-push]

      # Check for print statements
      - id: check-print-statements
        name: Check for print statements
        entry: bash -c 'grep -rn "^[[:space:]]*print(" --include="*.py" . && echo "Please remove print statements" && exit 1 || exit 0'
        language: system
        types: [python]

      # Check for hardcoded secrets
      - id: check-hardcoded-secrets
        name: Check for hardcoded secrets
        entry: bash -c 'grep -rn "password.*=.*["\'].*["\']\|secret.*=.*["\'].*["\']\|key.*=.*["\'].*["\']" --include="*.py" . && echo "Potential hardcoded secrets found" && exit 1 || exit 0'
        language: system
        types: [python]

      # Check for large files
      - id: check-large-files
        name: Check for large files
        entry: bash -c 'find . -type f -size +1M -not -path "./venv/*" -not -path "./env/*" -not -path "./.git/*" && echo "Large files found" && exit 1 || exit 0'
        language: system

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# Default language version
default_language_version:
  python: python3.11

# Default stages
default_stages: [commit, push]

# Exclude patterns
exclude: |
  (?x)^(
      migrations/.*|
      venv/.*|
      env/.*|
      .venv/.*|
      __pycache__/.*|
      .git/.*|
      .pytest_cache/.*|
      .mypy_cache/.*|
      .coverage.*|
      htmlcov/.*|
      build/.*|
      dist/.*|
      *.egg-info/.*|
      .tox/.*|
      .nox/.*|
      node_modules/.*|
      static/.*|
      media/.*|
      staticfiles/.*
  )$

# Fail fast
fail_fast: false

# Minimum pre-commit version
minimum_pre_commit_version: 3.0.0

# Repos to update
repos_update_schedule: weekly