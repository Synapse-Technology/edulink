# Generated by Django 4.2.23 on 2025-08-26 17:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SecurityConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("key", models.CharField(max_length=100, unique=True)),
                ("value", models.TextField()),
                ("description", models.TextField(blank=True)),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("integer", "Integer"),
                            ("float", "Float"),
                            ("boolean", "Boolean"),
                            ("json", "JSON"),
                        ],
                        default="string",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "security_configuration",
                "ordering": ["key"],
            },
        ),
        migrations.CreateModel(
            name="FailedLoginAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("invalid_credentials", "Invalid Credentials"),
                            ("account_locked", "Account Locked"),
                            ("account_inactive", "Account Inactive"),
                            ("email_not_verified", "Email Not Verified"),
                            ("user_not_found", "User Not Found"),
                        ],
                        default="invalid_credentials",
                        max_length=50,
                    ),
                ),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "db_table": "failed_login_attempt",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["email", "timestamp"],
                        name="failed_logi_email_2ef913_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "timestamp"],
                        name="failed_logi_ip_addr_373959_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="failed_logi_timesta_a486c1_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_key", models.CharField(max_length=40, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("device_id", models.CharField(blank=True, max_length=255)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "logout_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("user_logout", "User Logout"),
                            ("timeout", "Session Timeout"),
                            ("forced", "Forced Logout"),
                            ("security", "Security Logout"),
                            ("expired", "Token Expired"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_session",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="user_sessio_user_id_4f7411_idx",
                    ),
                    models.Index(
                        fields=["session_key"], name="user_sessio_session_ab559f_idx"
                    ),
                    models.Index(
                        fields=["ip_address"], name="user_sessio_ip_addr_b87514_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="user_sessio_created_4bbdd5_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="user_sessio_expires_85bda6_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SecurityEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("login_success", "Login Success"),
                            ("login_failed", "Login Failed"),
                            (
                                "login_failed_unknown_user",
                                "Login Failed - Unknown User",
                            ),
                            ("logout", "Logout"),
                            ("user_created", "User Created"),
                            ("user_deleted", "User Deleted"),
                            ("account_locked", "Account Locked"),
                            ("account_unlocked", "Account Unlocked"),
                            ("account_activated", "Account Activated"),
                            ("account_deactivated", "Account Deactivated"),
                            ("password_changed", "Password Changed"),
                            ("password_reset_requested", "Password Reset Requested"),
                            ("password_reset_completed", "Password Reset Completed"),
                            ("email_verified", "Email Verified"),
                            ("email_verification_sent", "Email Verification Sent"),
                            ("role_changed", "Role Changed"),
                            ("permission_granted", "Permission Granted"),
                            ("permission_revoked", "Permission Revoked"),
                            ("two_factor_enabled", "Two-Factor Enabled"),
                            ("two_factor_disabled", "Two-Factor Disabled"),
                            ("two_factor_verified", "Two-Factor Verified"),
                            ("refresh_token_created", "Refresh Token Created"),
                            ("refresh_token_blacklisted", "Refresh Token Blacklisted"),
                            ("token_validation_failed", "Token Validation Failed"),
                            ("multiple_failed_logins", "Multiple Failed Logins"),
                            ("unusual_login_location", "Unusual Login Location"),
                            ("concurrent_sessions", "Concurrent Sessions"),
                            ("brute_force_attempt", "Brute Force Attempt"),
                            ("service_access", "Service Access"),
                            ("api_rate_limit_exceeded", "API Rate Limit Exceeded"),
                            (
                                "unauthorized_access_attempt",
                                "Unauthorized Access Attempt",
                            ),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "user_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email for events without user object",
                        max_length=254,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_key", models.CharField(blank=True, max_length=40)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("investigating", "Investigating"),
                            ("resolved", "Resolved"),
                            ("false_positive", "False Positive"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "risk_score",
                    models.IntegerField(default=0, help_text="Risk score from 0-100"),
                ),
                ("resolution_notes", models.TextField(blank=True)),
                ("notification_sent", models.BooleanField(default=False)),
                ("notification_sent_at", models.DateTimeField(blank=True, null=True)),
                (
                    "service_name",
                    models.CharField(default="auth_service", max_length=100),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_security_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="security_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "security_event",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="security_ev_event_t_0b896c_idx",
                    ),
                    models.Index(
                        fields=["user", "timestamp"],
                        name="security_ev_user_id_d0f1bf_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "timestamp"],
                        name="security_ev_ip_addr_db6ebc_idx",
                    ),
                    models.Index(
                        fields=["severity", "status"],
                        name="security_ev_severit_a7cdf6_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="security_ev_timesta_2a2e6e_idx"
                    ),
                    models.Index(
                        fields=["risk_score"], name="security_ev_risk_sc_97ae48_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("read", "Read"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("password_change", "Password Change"),
                            ("permission_change", "Permission Change"),
                            ("role_change", "Role Change"),
                            ("email_verification", "Email Verification"),
                            ("two_factor_setup", "Two Factor Setup"),
                            ("invite_sent", "Invite Sent"),
                            ("account_lock", "Account Lock"),
                            ("account_unlock", "Account Unlock"),
                            ("token_refresh", "Token Refresh"),
                            ("token_blacklist", "Token Blacklist"),
                        ],
                        max_length=50,
                    ),
                ),
                ("resource_type", models.CharField(max_length=100)),
                ("resource_id", models.CharField(blank=True, max_length=100)),
                ("user_email", models.EmailField(blank=True, max_length=254)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_key", models.CharField(blank=True, max_length=40)),
                (
                    "changes",
                    models.JSONField(
                        blank=True, default=dict, help_text="Details of what changed"
                    ),
                ),
                ("old_values", models.JSONField(blank=True, default=dict)),
                ("new_values", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("description", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "service_name",
                    models.CharField(default="auth_service", max_length=100),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "audit_log",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["action", "timestamp"],
                        name="audit_log_action_09d227_idx",
                    ),
                    models.Index(
                        fields=["user", "timestamp"],
                        name="audit_log_user_id_835db7_idx",
                    ),
                    models.Index(
                        fields=["resource_type", "resource_id"],
                        name="audit_log_resourc_2570dd_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="audit_log_timesta_e8e14e_idx"
                    ),
                    models.Index(
                        fields=["ip_address"], name="audit_log_ip_addr_ef1097_idx"
                    ),
                ],
            },
        ),
    ]
