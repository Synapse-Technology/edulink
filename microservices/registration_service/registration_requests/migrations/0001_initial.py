# Generated by Django 4.2.7 on 2025-08-29 09:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="RegistrationRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "request_number",
                    models.CharField(editable=False, max_length=20, unique=True),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("institution_admin", "Institution Admin"),
                            ("employer", "Employer"),
                            ("student", "Student"),
                        ],
                        max_length=20,
                    ),
                ),
                ("organization_name", models.CharField(blank=True, max_length=255)),
                (
                    "organization_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("public_university", "Public University"),
                            ("private_university", "Private University"),
                            ("university_college", "University College"),
                            ("national_polytechnic", "National Polytechnic"),
                            (
                                "technical_training_institute",
                                "Technical Training Institute (TTI)",
                            ),
                            (
                                "vocational_training_center",
                                "Vocational Training Center (VTC)",
                            ),
                            ("technical_trainer_college", "Technical Trainer College"),
                            ("private_college", "Private College"),
                            (
                                "international_university",
                                "International University (Kenya Branch)",
                            ),
                        ],
                        help_text="Required for institution admins",
                        max_length=50,
                    ),
                ),
                (
                    "organization_website",
                    models.URLField(
                        blank=True, validators=[django.core.validators.URLValidator()]
                    ),
                ),
                ("organization_address", models.TextField(blank=True)),
                ("organization_phone", models.CharField(blank=True, max_length=20)),
                (
                    "institution_registration_number",
                    models.CharField(
                        blank=True,
                        help_text="CUE or TVETA registration number",
                        max_length=100,
                    ),
                ),
                (
                    "cue_accreditation_status",
                    models.CharField(
                        blank=True,
                        help_text="CUE accreditation status if applicable",
                        max_length=50,
                    ),
                ),
                (
                    "tveta_registration_status",
                    models.CharField(
                        blank=True,
                        help_text="TVETA registration status if applicable",
                        max_length=50,
                    ),
                ),
                ("company_industry", models.CharField(blank=True, max_length=100)),
                (
                    "company_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("startup", "1-10 employees"),
                            ("small", "11-50 employees"),
                            ("medium", "51-200 employees"),
                            ("large", "201-1000 employees"),
                            ("enterprise", "1000+ employees"),
                        ],
                        max_length=20,
                    ),
                ),
                ("department", models.CharField(blank=True, max_length=100)),
                ("position", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("email_verification_sent", "Email Verification Sent"),
                            ("email_verified", "Email Verified"),
                            (
                                "domain_verification_pending",
                                "Domain Verification Pending",
                            ),
                            ("domain_verified", "Domain Verified"),
                            (
                                "institutional_verification_pending",
                                "Institutional Verification Pending",
                            ),
                            ("institutional_verified", "Institutional Verified"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("critical", "Critical Risk"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "risk_score",
                    models.FloatField(
                        default=0.5, help_text="Risk score from 0.0 to 1.0"
                    ),
                ),
                ("email_verified", models.BooleanField(default=False)),
                (
                    "email_verification_token",
                    models.CharField(blank=True, max_length=255),
                ),
                (
                    "email_verification_sent_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("domain_verified", models.BooleanField(default=False)),
                (
                    "domain_verification_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("cue", "Commission for University Education (CUE)"),
                            (
                                "tveta",
                                "Technical and Vocational Education and Training Authority (TVETA)",
                            ),
                            ("manual", "Manual Verification"),
                            ("domain", "Domain Verification"),
                            ("document", "Document Verification"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "domain_verification_details",
                    models.JSONField(blank=True, default=dict),
                ),
                ("institutional_verified", models.BooleanField(default=False)),
                (
                    "institutional_verification_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("cue", "Commission for University Education (CUE)"),
                            (
                                "tveta",
                                "Technical and Vocational Education and Training Authority (TVETA)",
                            ),
                            ("manual", "Manual Verification"),
                            ("domain", "Domain Verification"),
                            ("document", "Document Verification"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "institutional_verification_details",
                    models.JSONField(blank=True, default=dict),
                ),
                ("assigned_reviewer", models.CharField(blank=True, max_length=255)),
                ("review_notes", models.TextField(blank=True)),
                ("review_started_at", models.DateTimeField(blank=True, null=True)),
                ("review_completed_at", models.DateTimeField(blank=True, null=True)),
                ("approved_by", models.CharField(blank=True, max_length=255)),
                ("rejected_by", models.CharField(blank=True, max_length=255)),
                ("rejection_reason", models.TextField(blank=True)),
                ("approval_notes", models.TextField(blank=True)),
                ("user_account_created", models.BooleanField(default=False)),
                ("user_account_id", models.CharField(blank=True, max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("referrer", models.URLField(blank=True)),
                ("utm_source", models.CharField(blank=True, max_length=100)),
                ("utm_medium", models.CharField(blank=True, max_length=100)),
                ("utm_campaign", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "db_table": "registration_requests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RegistrationRequestLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action", models.CharField(max_length=100)),
                ("old_status", models.CharField(blank=True, max_length=50)),
                ("new_status", models.CharField(blank=True, max_length=50)),
                ("performed_by", models.CharField(blank=True, max_length=255)),
                ("notes", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "registration_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="registration_requests.registrationrequest",
                    ),
                ),
            ],
            options={
                "db_table": "registration_request_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RegistrationRequestAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file_name", models.CharField(max_length=255)),
                ("file_type", models.CharField(max_length=50)),
                ("file_size", models.PositiveIntegerField()),
                ("file_url", models.URLField()),
                ("uploaded_by", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_by", models.CharField(blank=True, max_length=255)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "registration_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="registration_requests.registrationrequest",
                    ),
                ),
            ],
            options={
                "db_table": "registration_request_attachments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="registrationrequest",
            index=models.Index(fields=["email"], name="registratio_email_b0b6d2_idx"),
        ),
        migrations.AddIndex(
            model_name="registrationrequest",
            index=models.Index(fields=["status"], name="registratio_status_ac51a3_idx"),
        ),
        migrations.AddIndex(
            model_name="registrationrequest",
            index=models.Index(fields=["role"], name="registratio_role_ac6041_idx"),
        ),
        migrations.AddIndex(
            model_name="registrationrequest",
            index=models.Index(
                fields=["organization_name"], name="registratio_organiz_e40a1e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="registrationrequest",
            index=models.Index(
                fields=["created_at"], name="registratio_created_a4f39d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="registrationrequest",
            index=models.Index(
                fields=["risk_level"], name="registratio_risk_le_d51645_idx"
            ),
        ),
    ]
